{
  "name": "account-couch",
  "version": "1.0.1",
  "description": "Implement the accounts interface using a couchdb backend",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nisaacson/account-couch.git"
  },
  "keywords": [
    "accounts",
    "register",
    "couch",
    "couchdb",
    "cradle"
  ],
  "author": {
    "name": "Noah Isaacson"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "dependencies": {
    "required-keys": "~1.0.5",
    "couch-profile": "~1.0.16",
    "bcrypt-nodejs": "0.0.3",
    "account": "~1.0.0"
  },
  "devDependencies": {
    "eyespect": "~0.1.8",
    "should": "~1.2.2",
    "rewire": "~1.1.3",
    "mocha": "~1.9.0",
    "optimist": "~0.4.0",
    "cradle-nconf": "~1.0.2",
    "nconf": "~0.6.7",
    "async": "~0.2.7",
    "account-test": "~1.0.0"
  },
  "readme": "# Account Couch\nImplement the account interface using a couchdb backend with the couch-profile module\n\n[![Build Status](https://travis-ci.org/nisaacson/account-couch.png?branch=master)](https://travis-ci.org/nisaacson/account-couch)\n[![Dependency Status Status](https://david-dm.org/nisaacson/account-couch.png)](https://david-dm.org/nisaacson/account-couch)\n\n# Installation\nInstall the module by executing\n```bash\nnpm install -S account-couch\n```\n\nYou will also need the views provided by the [couch-profile](https://github.com/nisaacson/couch-profile) module. You can add these to your couchdb database using the [couchdb-update-views](https://github.com/nisaacson/couchdb-update-views) module.\n\n```bash\n# create a couchdb database named account_couch_test\ncurl -X PUT localhost:5984/account_couch_test\n# install the couchdb-update-views module globally so the couchdb-update-views command is available on the command line\nnpm install -g couchdb-update-views\n# add the couch-profile views to the newly created account_couch_test database\ncouchdb-update-views --config test/config.json --docsDir node_modules/couch-profile/docs\n```\n\nYou can perform the steps listed above by executing the travis before_install script with the command\n\n```bash\nscript/createDatabase.sh\nscript/createViews.sh\n```\n\n\n# Usage\nThe account couch module implements and exports the following interface functions:\n\n* `login`\n* `register`\n* `serializeUser`\n* `deserializeUser`\n* `removeUser`\n\n\n## Register\n\nTo register a new account, pass an object with an `email`,  and a `password`\n\n```javascript\nvar Account = require('account-couch')\nvar config = require('nconf').defaults({\n  couch: {\n    host: 'localhost',\n    port: 5984,\n    database: 'account_couch_test'\n  }    \n})\nvar db = require('cradle-nconf')(config)\n// create the account object with the cradle db passed as a parameter to the constructor\nvar account = new Account(db)\nvar data = {\n  email: 'foo@example.com',\n  password: 'barPassword',\n}\naccount.register(data, function (err, reply) {\n  if (err) {\n    inspect(err, 'error registering user account')\n    return\n  }\n  inspect(reply, 'user account created correctly'\n})\n```\n\n## Login\n\nTo login an existing account, pass an object with an `email`,  and a `password` fields set\n\n```javascript\nvar Account = require('account-couch')\nvar config = require('nconf').defaults({\n  couch: {\n    host: 'localhost',\n    port: 5984,\n    database: 'account_couch_test'\n  }    \n})\nvar db = require('cradle-nconf')(config)\n// create the account object with the cradle db passed as a parameter to the constructor\nvar account = new Account(db)\nvar data = {\n  email: 'foo@example.com',\n  password: 'barPassword',\n}\naccount.login(data, function (err, reply) {\n  if (err) {\n    inspect(err, 'error performing login for user account')\n    return\n  }\n  inspect(reply, 'user account created correctly'\n})\n```\n\n## Serialize User\n\nTo serialize an existing user account profile, pass a profile object to the serializeUser method. You will get back the `_id` of the profile in the couchdb database\n\n```javascript\nvar Account = require('account-couch')\nvar config = require('nconf').defaults({\n  couch: {\n    host: 'localhost',\n    port: 5984,\n    database: 'account_couch_test'\n  }    \n})\nvar db = require('cradle-nconf')(config)\n// create the account object with the cradle db passed as a parameter to the constructor\nvar account = new Account(db)\nvar data = {\n  email: 'foo@example.com',\n  password: 'barPassword',\n}\n// get the profile by logging in\naccount.login(data, function (err, profile) {\n  if (err) {\n    inspect(err, 'error performing login for user account')\n    return\n  }\n  inspect(profile, 'user account profile')\n  account.serializeUser(profile, function (err, reply) {\n    if (err) {\n      inspect(err, 'error performing login for user account')\n      return\n    }\n    inspect(reply, 'profile serialized to _id')\n  })\n})\n```\n\n## Deserialize User\n\nTo deserialize an existing user account profile, pass an `_id` of the profile in the couchdb database\n\n```javascript\nvar Account = require('account-couch')\nvar config = require('nconf').defaults({\n  couch: {\n    host: 'localhost',\n    port: 5984,\n    database: 'account_couch_test'\n  }    \n})\nvar db = require('cradle-nconf')(config)\n// create the account object with the cradle db passed as a parameter to the constructor\nvar account = new Account(db)\n// an _id of a user profile in the couchdb database\nvar id = 'fooID'\naccount.deserializeUser(id, function (err, profile) {\n  if (err) {\n    inspect(err, 'error performing login for user account')\n    return\n  }\n  inspect(profile, 'user account profile')\n})\n```\n\n\n\n## Remove User\n\nTo completly remove an existing user account profile from the couchdb database, pass an object containing the `email` and `password` of the user account profile to be removed from the couchdb database\n\n```javascript\nvar Account = require('account-couch')\nvar config = require('nconf').defaults({\n  couch: {\n    host: 'localhost',\n    port: 5984,\n    database: 'account_couch_test'\n  }    \n})\nvar db = require('cradle-nconf')(config)\n// create the account object with the cradle db passed as a parameter to the constructor\nvar account = new Account(db)\nvar data = {\n  email: 'foo@example.com',\n  password: 'barPassword',\n}\naccount.removeUser(data, function (err) {\n  if (err) {\n    inspect(err, 'error removing profile')\n    return\n  }\n  inspect('user account profile removed')\n})\n```\n\n# Test\nTo run the test suite execute\n\n```bash\n# install development dependencies\nnpm install\n# run tests\nnpm test\n```\n\n",
  "_id": "account-couch@1.0.1",
  "_from": "account-couch@~1.0.0"
}
