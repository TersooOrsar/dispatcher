{
  "name": "couch-profile",
  "version": "1.0.16",
  "description": "Store profile information in couchdb",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nisaacson/couch-profile.git"
  },
  "keywords": [
    "couchdb",
    "couchdb-update-views",
    "cradle",
    "user",
    "profile",
    "profiles",
    "browserid"
  ],
  "author": {
    "name": "Noah Isaacson"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "dependencies": {
    "eyespect": "~0.1.8",
    "cradle": "~0.6.4",
    "required-keys": "~1.0.4",
    "bcrypt-nodejs": "git://github.com/nisaacson/bcrypt-nodejs.git"
  },
  "devDependencies": {
    "should": "~1.2.2",
    "nconf": "~0.6.7",
    "cradle": "~0.6.4",
    "mocha": "~1.8.1",
    "async": "~0.2.5"
  },
  "readme": "Store profile information in couchdb\n\n[![Build Status](https://travis-ci.org/nisaacson/couch-profile.png)](https://travis-ci.org/nisaacson/couch-profile)\n[![Dependency Status](https://david-dm.org/nisaacson/couch-profile/status.png)](https://david-dm.org/nisaacson/couch-profile)\nDependency tracking by [David](https://david-dm.org/)\n\n\n# Installation\n```bash\nnpm install couch-profile\n```\n\n# Usage\nTo use the module you will first need to setup a [cradle](https://github.com/cloudhead/cradle) connection. A few views are needed in your database to use couch profiles. Look in the <project_roo>/docs/ folder to see the views needed. You can easily create these view using the [couchdb-update-views](https://github.com/nisaacson/couchdb-update-views)\n\n## API\nLook at index.js to see the full public api available. The following functions are available for use\n\n- findProfile\n- getOrCreateProfile\n- checkPassword\n- hashPassword\n\n## Instatiate Views\n```bash\nnpm install -g couchdb-update-views\ncouchdb-update-views --config <path/to/config.json> --docsDir <couch-profile_project_root>/docs\n```\n\n\n## Get Or Create Profile\nThis will automatically create a new profile if needed. Use **findProfile** if you just want to lookup a profile without creating one\n```javascript\nvar couchProfile = require('couch-profile')\nvar db = <cradle database connection>\nvar profileData = {\n  db: db,\n  email: 'foo@example.com',\n  password: 'barPass' // this will be salted and hashed before storage\n}\ncouchProfile.getOrCreateProfile(profileData, function(err, profile) {\n  if (err) {\n    inspect(err, 'error getting profile')\n    return\n  }\n  inspect(profile, 'got couch profile')\n})\n```\n\n\n## Find Profile\nLookup a profile but don't create new ones\n```javascript\nvar couchProfile = require('couch-profile')\nvar db = <cradle database connection>\nvar profileData = {\n  db: db,\n  email: 'foo@example.com'\n}\ncouchProfile.getProfile(profileData, function(err, profile) {\n  if (err) {\n    inspect(err, 'error getting profile')\n    return\n  }\n  inspect(profile, 'got couch profile')\n})\n```\n\n\n## Passwords\nIf you create a profile with a **password** field, it will be salted and hashed and stored in a hash field. The actual password value is not stored. Hashing is done with the native nodejs bcrypt implementation [https://github.com/shaneGirish/bcrypt-nodejs](https://github.com/shaneGirish/bcrypt-nodejs)\n\n```javascript\nvar bcrypt = require('bcrypt-nodejs')\nvar couchProfile = require('couch-profile')\nvar password = 'fooBarPass'\ncouchProfile.hashPassword(profileData, function(err, profile) {\n  if (err) {\n    inspect(err, 'error hashing password')\n    return\n  }\n  inspect(password, 'original raw password')\n  inspect(reply, 'hashed password')\n  bcrypt.compare(password, hash, function (err, reply) {\n    if (err) {\n      inspect(err, 'erorr checking if hashed password matches')\n      return\n    }\n    inspect(reply, 'does hash check out? ')\n  })\n})\n```\n",
  "_id": "couch-profile@1.0.16",
  "_from": "couch-profile@~1.0.16"
}
